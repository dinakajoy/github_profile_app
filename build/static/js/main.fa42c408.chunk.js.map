{"version":3,"sources":["Clock/Clock.js","GithubProfile/CardItem.js","GithubProfile/CardList.js","GithubProfile/AddCard.js","GithubProfile/GithubUserDetails.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","className","toLocaleTimeString","React","Component","CardItem","to","pathname","card","login","target","rel","src","avatar_url","alt","name","location","url","CardList","cards","map","key","id","AddCard","username","saveToLocalStorage","data","a","localStorage","setItem","JSON","stringify","handleSubmit","event","preventDefault","fetch","resp","json","onSubmit","type","value","onChange","placeholder","required","GithubUserDetails","repos","loadCard","match","params","console","log","message","getDate","getMonth","getDay","getFullYear","loadRepos","bio","created_at","public_repos","following","followers","repo","index","class","description","language","forks_count","stargazers_count","size","Header","Footer","App","addCard","cardData","prevState","values","keys","Object","i","length","push","parse","getItem","exact","path","render","Fragment","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"iVAmCeA,G,wDA/Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAAIC,MAFP,E,gEAKE,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACZP,KAAM,IAAIC,S,+BAKZ,OACE,yBAAKO,UAAU,SAAf,eACeN,KAAKH,MAAMC,KAAKS,0B,GA1BjBC,IAAMC,YCkBXC,G,6KAfX,OACE,kBAAC,IAAD,CAAMC,GAAI,CAAEC,SAAS,QAAQZ,KAAKJ,MAAMiB,KAAKC,MAAOD,KAAM,OAASE,OAAO,SAASC,IAAI,sBAAsBV,UAAU,QACrH,yBAAKA,UAAU,WACb,yBAAKW,IAAKjB,KAAKJ,MAAMiB,KAAKK,WAAYC,IAAKnB,KAAKJ,MAAMiB,KAAKO,OAC3D,yBAAKd,UAAU,WACb,4BAAKN,KAAKJ,MAAMiB,KAAKO,MAAU,6BAC/B,2BAAIpB,KAAKJ,MAAMiB,KAAKQ,UACpB,2BAAIrB,KAAKJ,MAAMiB,KAAKS,Y,GATTd,IAAMC,YCQdc,E,uKANX,OACEvB,KAAKJ,MAAM4B,MAAMC,KAAI,SAACZ,GAAD,OAAU,kBAAC,EAAD,CAAUa,IAAKb,EAAKc,GAAId,KAAMA,W,GAH5CL,IAAMC,W,wBCwBdmB,E,4MAxBb/B,MAAQ,CACNgC,SAAU,I,EAEZC,mB,uCAAqB,WAAMC,GAAN,SAAAC,EAAA,sDACnBC,aAAaC,QAAQH,EAAKJ,GAAIQ,KAAKC,UAAUL,IAD1B,2C,wDAGrBM,a,uCAAe,WAAMC,GAAN,iBAAAN,EAAA,6DACbM,EAAMC,iBADO,SAEMC,MAAM,gCAAD,OAAiC,EAAK3C,MAAMgC,WAFvD,cAEPY,EAFO,gBAGMA,EAAKC,OAHX,cAGPA,EAHO,gBAIP,EAAKZ,mBAAmBY,GAJjB,OAKb,EAAK9C,MAAM+C,SAASD,GACpB,EAAKrC,SAAS,CAAEwB,SAAU,KANb,4C,6GAQL,IAAD,OACL,OACE,0BAAMc,SAAU3C,KAAKqC,aAAc/B,UAAU,QAC3C,2BAAOsC,KAAK,OAAOC,MAAO7C,KAAKH,MAAMgC,SAAUiB,SAAU,SAAAR,GAAK,OAAE,EAAKjC,SAAS,CAAEwB,SAAUS,EAAMvB,OAAO8B,SAAUvC,UAAU,WAAWyC,YAAY,wBAAwBC,UAAQ,IAClL,4BAAQ1C,UAAU,OAAlB,wB,GAnBYE,IAAMC,WCqFbwC,E,4MApFbpD,MAAQ,CACNgB,KAAM,GACNqC,MAAO,I,EAGTC,S,sBAAW,gCAAAnB,EAAA,sEAEDV,EAFC,uCAEqC,EAAK1B,MAAMwD,MAAMC,OAAO1B,IAF7D,SAGYa,MAAMlB,GAHlB,cAGDmB,EAHC,gBAIYA,EAAKC,OAJjB,cAIDA,EAJC,yBAKA,EAAKrC,SAAS,CAACQ,KAAM6B,KALrB,kCAOPY,QAAQC,IAAI,KAAMC,SAPX,0D,EAWXC,QAAU,SAAC3D,GAET,MAAM,UAAN,OADmB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACtG,IAAIC,KAAKD,GAAM4D,YAA3C,YAA0D,IAAI3D,KAAKD,GAAM6D,SAAzE,aAAsF,IAAI5D,KAAKD,GAAM8D,gB,EAGvGC,U,sBAAY,8BAAA7B,EAAA,+EAEWQ,MAAM,gCAAD,OAAiC,EAAK5C,MAAMwD,MAAMC,OAAO1B,GAAzD,WAFhB,cAEFc,EAFE,gBAGWA,EAAKC,OAHhB,cAGFA,EAHE,yBAID,EAAKrC,SAAS,CAAC6C,MAAOR,KAJrB,kCAMRY,QAAQC,IAAI,KAAMC,SANV,0D,4LAWJxD,KAAKmD,W,uBACLnD,KAAK6D,Y,qIAGX,OACE,yBAAKvD,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKW,IAAKjB,KAAKH,MAAMgB,KAAKK,WAAYC,IAAKnB,KAAKH,MAAMgB,KAAKO,OAC3D,yBAAKd,UAAU,UACb,4BAAKN,KAAKH,MAAMgB,KAAKO,MACrB,2BAAIpB,KAAKH,MAAMgB,KAAKiD,KACpB,yBAAKxD,UAAU,eACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,qBACb,8BAAON,KAAKH,MAAMgB,KAAKQ,WAEzB,yBAAKf,UAAU,qBACb,uBAAGA,UAAU,mBACb,8BAAON,KAAKyD,QAAQzD,KAAKH,MAAMgB,KAAKkD,gBAI1C,yBAAKzD,UAAU,SACb,yBAAKA,UAAU,OAAON,KAAKH,MAAMgB,KAAKmD,aAAtC,IAAoD,6BAApD,gBACA,yBAAK1D,UAAU,OAAON,KAAKH,MAAMgB,KAAKoD,UAAtC,IAAiD,6BAAjD,aACA,yBAAK3D,UAAU,OAAON,KAAKH,MAAMgB,KAAKqD,UAAtC,IAAiD,6BAAjD,eAIJ,yBAAK5D,UAAU,aACb,8CAAuB,6BACvB,yBAAKA,UAAU,gBACZN,KAAKH,MAAMqD,MAAMzB,KAAI,SAAS0C,EAAMC,GACnC,OAAO,yBAAK9D,UAAU,gBACpB,4BAAI,uBAAG+D,MAAM,eAAkB,KAAMF,EAAK/C,MAC1C,2BAAI+C,EAAKG,aACT,6BACA,yBAAKD,MAAM,cACT,8BAAM,uBAAGA,MAAM,mBAAqBF,EAAKI,UACzC,8BAAM,uBAAGF,MAAM,oBAAuBF,EAAKK,aAC3C,8BAAM,uBAAGH,MAAM,eAAkBF,EAAKM,kBACtC,8BAAM,uBAAGJ,MAAM,oBAAuBF,EAAKO,KAA3C,kB,GA1EclE,IAAMC,W,MCKtC,SAASkE,IACP,OACE,4BAAQrE,UAAU,cAChB,6DACA,kBAAC,EAAD,OAKN,SAASsE,IACP,OACE,4BAAQtE,UAAU,cAChB,4D,IAwDSuE,E,kDAlDb,WAAYjF,GAAQ,IAAD,8BACjB,cAAMA,IAMRkF,QAAU,SAACC,GACT,EAAK1E,UAAS,SAAA2E,GAAS,MAAK,CAC1BxD,MAAM,GAAD,mBAAMwD,EAAUxD,OAAhB,CAAuBuD,SAP9B,EAAKlF,MAAQ,CACX2B,MAAO,IAHQ,E,gEAiBjB,IAHA,IAAIyD,EAAS,GACTC,EAAOC,OAAOD,KAAKjD,cACnBmD,EAAIF,EAAKG,OACLD,KACNH,EAAOK,KAAKnD,KAAKoD,MAAMtD,aAAauD,QAAQN,EAAKE,MACjDpF,KAAKK,SAAS,CAAEmB,MAAOyD,M,6CAKzBjF,KAAKK,SAAS,CAAEmB,MAAOxB,KAAKH,U,+BAGpB,IAAD,OACP,OACE,kBAAC,IAAD,KACE,oCACE,kBAAC8E,EAAD,MACA,0BAAMrE,UAAU,WACd,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAOmF,OAAK,EAACC,KAAK,IAAIC,OAAS,SAAA/F,GAAK,OAClC,kBAAC,IAAMgG,SAAP,KACE,kBAAC,EAAD,CAASjD,SAAU,EAAKmC,UACxB,kBAAC,EAAD,CAAUtD,MAAO,EAAK3B,MAAM2B,aAIlC,kBAAC,IAAD,CAAOkE,KAAK,aAAaG,UAAW5C,KAEtC,kBAAC2B,EAAD,Y,GA5CQpE,IAAMC,WCbJqF,QACW,cAA7BC,OAAO1E,SAAS2E,UAEe,UAA7BD,OAAO1E,SAAS2E,UAEhBD,OAAO1E,SAAS2E,SAAS5C,MACvB,2DCZN6C,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMpD,c","file":"static/js/main.fa42c408.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Clock.css';\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"clock\" >\r\n        The Time is {this.state.date.toLocaleTimeString()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport { Link } from 'react-router-dom'; \r\nimport './GithubProfile.css';\r\n\r\nclass CardItem extends React.Component {\r\n  render() {\r\n    return (\r\n      <Link to={{ pathname:/users/+this.props.card.login, card: \"hey\" }} target=\"_BLANK\" rel=\"noopener noreferrer\" className=\"link\">\r\n        <div className=\"wrapper\">\r\n          <img src={this.props.card.avatar_url} alt={this.props.card.name} />\r\n          <div className=\"details\">\r\n            <h2>{this.props.card.name}</h2><br />\r\n            <p>{this.props.card.location}</p>\r\n            <p>{this.props.card.url}</p>\r\n          </div>\r\n        </div> \r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardItem;","import React from 'react';\r\nimport CardItem from './CardItem';\r\nimport './GithubProfile.css';\r\n\r\nclass CardList extends React.Component {\r\n  render() {\r\n    return (\r\n      this.props.cards.map((card) => <CardItem key={card.id} card={card} />)\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './GithubProfile.css';\r\n\r\nclass AddCard extends React.Component {\r\n  state = {\r\n    username: ''\r\n  };\r\n  saveToLocalStorage = async(data) => {\r\n    localStorage.setItem(data.id, JSON.stringify(data));\r\n  }\r\n  handleSubmit = async(event) => {\r\n    event.preventDefault();\r\n    const resp = await fetch(`https://api.github.com/users/${this.state.username}`);\r\n    const json = await resp.json();\r\n    await this.saveToLocalStorage(json);\r\n    this.props.onSubmit(json);\r\n    this.setState({ username: '' });\r\n  }\r\n  render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit} className=\"form\">\r\n          <input type=\"text\" value={this.state.username} onChange={event=>this.setState({ username: event.target.value })} className=\"username\" placeholder=\"Enter Github Username\" required />\r\n          <button className=\"btn\">Add Github User</button>\r\n        </form>\r\n      );\r\n  }\r\n}\r\n\r\nexport default AddCard;","import React from 'react';\r\nimport './GithubProfile.css';\r\n\r\nclass GithubUserDetails extends React.Component {\r\n  state = {\r\n    card: [],\r\n    repos: []\r\n  }\r\n\r\n  loadCard = async() => {\r\n    try {\r\n      const url = `https://api.github.com/users/${this.props.match.params.id}`;\r\n      const resp = await fetch(url) ;\r\n      const json = await resp.json();\r\n      return this.setState({card: json});\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  getDate = (date) => {\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    return `Joined ${monthNames[new Date(date).getMonth()]} ${new Date(date).getDay()}, ${new Date(date).getFullYear()}`;\r\n  }\r\n\r\n  loadRepos = async() => {\r\n    try {\r\n      const resp = await fetch(`https://api.github.com/users/${this.props.match.params.id}/repos`);\r\n      const json = await resp.json();\r\n      return this.setState({repos: json});\r\n    } catch(error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.loadCard();\r\n    await this.loadRepos();\r\n  }\r\n  render() { \r\n    return (\r\n      <div className=\"detail_wrapper\">\r\n        <div className=\"section-a\">\r\n          <img src={this.state.card.avatar_url} alt={this.state.card.name} />\r\n          <div className=\"detail\">\r\n            <h1>{this.state.card.name}</h1>\r\n            <p>{this.state.card.bio}</p>\r\n            <div className=\"sub-details\">\r\n              <div className=\"sub-details-left\">\r\n                <i className=\"fa fa-map-marker\"></i>\r\n                <span>{this.state.card.location}</span>\r\n              </div>\r\n              <div className=\"sub-details-right\">\r\n                <i className=\"fa fa-calendar\"></i>\r\n                <span>{this.getDate(this.state.card.created_at)}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"boxes\">\r\n            <div className=\"box\">{this.state.card.public_repos} <br />Repositories</div>\r\n            <div className=\"box\">{this.state.card.following} <br />Following</div>\r\n            <div className=\"box\">{this.state.card.followers} <br />Followers</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"section-b\">\r\n          <h2> Repositories </h2><br />\r\n          <div className=\"repo-details\">\r\n            {this.state.repos.map(function(repo, index) {\r\n              return <div className=\"repo_wrapper\">\r\n                <h4><i class=\"fa fa-code\"></i>{'  '}{repo.name}</h4>\r\n                <p>{repo.description}</p>\r\n                <br />\r\n                <div class=\"repo-group\">\r\n                  <span><i class=\"\tfa fa-circle\"></i>{repo.language}</span>\r\n                  <span><i class=\"fa fa-code-fork\"></i>{repo.forks_count}</span>\r\n                  <span><i class=\"fa fa-star\"></i>{repo.stargazers_count}</span>\r\n                  <span><i class=\"fa fa-pie-chart\"></i>{repo.size}kb</span>\r\n                </div>\r\n              </div>\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GithubUserDetails;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Clock from './Clock/Clock';\r\nimport CardList from './GithubProfile/CardList';\r\nimport AddCard from './GithubProfile/AddCard';\r\nimport GithubUserDetails from './GithubProfile/GithubUserDetails';\r\nimport './App.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1>Welcome To My First React App</h1>\r\n      <Clock />\r\n    </header>\r\n  )\r\n}\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"App-footer\">\r\n      <small>Developed By Odinaka Joy</small>\r\n    </footer>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: []\r\n    }\r\n  }\r\n  \r\n  addCard = (cardData) => {\r\n    this.setState(prevState => ({\r\n      cards: [...prevState.cards, cardData]\r\n    }))\r\n  }\r\n\r\n  componentDidMount() {\r\n    let values = [];\r\n    let keys = Object.keys(localStorage);\r\n    let i = keys.length;\r\n    while ( i-- ) {\r\n      values.push(JSON.parse(localStorage.getItem(keys[i])));\r\n      this.setState({ cards: values });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({ cards: this.state});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <>\r\n          <Header />\r\n          <main className=\"content\">\r\n            <div className=\"container\">\r\n              <Route exact path=\"/\" render= {props=> (\r\n                <React.Fragment>\r\n                  <AddCard onSubmit={this.addCard} />\r\n                  <CardList cards={this.state.cards} />\r\n                </React.Fragment>\r\n              )} />\r\n            </div>\r\n            <Route path=\"/users/:id\" component={GithubUserDetails} />\r\n          </main>\r\n          <Footer />\r\n        </>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}